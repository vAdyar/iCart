application {
  config {
    baseName gateway,
    applicationType gateway,
    packageName com.application.cart,
    authenticationType oauth2,
    prodDatabaseType mysql,
    cacheProvider ehcache
    clientPackageManager yarn
    clientFramework react
    serverPort 8080
    serviceDiscoveryType eureka
  }
  entities *

}

application {
  config {
    baseName catalogue,
    applicationType microservice,
    packageName com.application.cart,
    authenticationType oauth2,
    prodDatabaseType mysql,
    cacheProvider ehcache
    clientPackageManager yarn
    clientFramework react
    serverPort 8081
    serviceDiscoveryType eureka
  }

  entities Product, ProductCategory
}

application {
  config {
      baseName cart,
      applicationType microservice,
      packageName com.application.cart,
      authenticationType oauth2,
      prodDatabaseType mysql,
      cacheProvider ehcache
      clientPackageManager yarn
      clientFramework react
      serverPort 8082
      serviceDiscoveryType eureka
    }

  entities OrderItem
}

application {
  config {
      baseName payment,
      applicationType microservice,
      packageName com.application.cart,
      authenticationType oauth2,
      prodDatabaseType mysql,
      cacheProvider ehcache
      clientPackageManager yarn
      clientFramework react
      serverPort 8083
      serviceDiscoveryType eureka
    }
  entities Invoice, Shipment, ProductOrder
}

/* Entities for Store Gateway */
/** Product sold by the Online store */
entity Product {
	id Integer required
    name String required
    description String
    price BigDecimal required min(0)
    size Size required
    image ImageBlob
}
enum Size {
    S, M, L, XL, XXL
}
entity ProductCategory {
	id Integer required
    name String required
    description String
}
entity Customer {
	id Integer required
    firstName String required
    lastName String required
    gender Gender required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}
enum Gender {
    MALE, FEMALE, OTHER
}
entity ProductOrder {
	id Integer required
    customerId Integer required
    orderItems String required
    placedDate Instant required
    status OrderStatus required
    code String required
}
enum OrderStatus {
    COMPLETED, PENDING, CANCELLED
}
entity OrderItem {
	id Integer required
	productId Integer required
    quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}
enum OrderItemStatus {
    AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

/* Entities for Invoice microservice */
entity Invoice {
	id Integer required
    code String required
    date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}
enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}
entity Shipment {
	id Integer required
    trackingCode String
    date Instant required
    details String
}
enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}
relationship OneToMany {
    Invoice{shipment} to Shipment{invoice(code) required}
}
relationship OneToOne {
    Customer{user(login) required} to User
    ProductOrder{invoice(id) required} to Invoice{productOrder}
}
relationship OneToMany {
   ProductCategory{product} to Product{productCategory(name)}
}

service Product, ProductCategory, Customer, ProductOrder, OrderItem, Invoice, Shipment with serviceClass
paginate Product, Customer, ProductOrder, OrderItem, Invoice, Shipment with pagination